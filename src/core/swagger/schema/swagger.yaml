openapi: 3.0.0
paths:
  /swagger/json:
    get:
      operationId: SwaggerController_getJson
      summary: Получить Swagger JSON
      parameters: []
      responses:
        "200":
          description: Swagger JSON успешно загружен
      tags:
        &a1
        - Swagger
  /swagger/typescript:
    get:
      operationId: SwaggerController_getTypescript
      summary: Получить Swagger TypeScript клиент
      parameters: []
      responses:
        "200":
          description: Swagger TypeScript клиент успешно загружен
      tags: *a1
  /auth/account:
    get:
      operationId: AccountController_fetch
      summary: Получить данные текущего пользователя
      parameters: []
      responses:
        "200":
          description: Данные пользователя успешно получены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "401":
          description: Пользователь не авторизован
      tags:
        &a2
        - Account
  /auth/account/create:
    post:
      operationId: AccountController_create
      summary: Создать нового пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "200":
          description: Пользователь успешно создан
        "400":
          description: Некорректные данные для создания пользователя
      tags: *a2
  /auth/account/change/password:
    patch:
      operationId: AccountController_changePassword
      summary: Изменить пароль пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordDto"
      responses:
        "200":
          description: Пароль успешно изменен
        "400":
          description: Некорректные данные для изменения пароля
        "401":
          description: Пользователь не авторизован
      tags: *a2
  /auth/account/change/avatar:
    patch:
      operationId: AccountController_changeAvatar
      summary: Изменить аватар пользователя
      parameters:
        - name: file
          required: true
          in: path
          description: Изображение аватара пользователя (файл)
          schema: {}
      responses:
        "200":
          description: Аватар успешно обновлен
        "400":
          description: Неверный формат файла или файл слишком большой
        "401":
          description: Пользователь не авторизован
      tags: *a2
  /auth/session/login:
    post:
      operationId: SessionController_login
      summary: Войти в систему
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: Пользователь успешно авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: Некорректные данные для входа в систему
        "404":
          description: Пользователь не найден
      tags:
        &a3
        - Session
  /auth/session/logout:
    post:
      operationId: SessionController_logout
      summary: Выйти из системы
      parameters: []
      responses:
        "200":
          description: Пользователь успешно вышел из системы
        "500":
          description: Не удалось завершить сессию
      tags: *a3
  /auth/session/all:
    get:
      operationId: SessionController_findAll
      summary: Получить все активные сессии для пользователя
      parameters: []
      responses:
        "200":
          description: Список всех активных сессий
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SessionEntity"
        "401":
          description: Неавторизованный доступ
      tags: *a3
    delete:
      operationId: SessionController_removeAll
      summary: Удалить все активные сессии для вошедшего пользователя
      parameters: []
      responses:
        "200":
          description: Все сессии удалены
        "500":
          description: Не удалось удалить сессии
      tags: *a3
  /auth/session/current:
    get:
      operationId: SessionController_findCurrent
      summary: Получить данные текущей активной сессии
      parameters: []
      responses:
        "200":
          description: Данные текущей сессии
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionEntity"
        "404":
          description: Сессия не найдена
      tags: *a3
  "/auth/session/by-id/{id}":
    delete:
      operationId: SessionController_removeById
      summary: Удалить конкретную сессию по ID
      parameters:
        - name: id
          required: true
          in: path
          description: ID сессии для удаления
          schema:
            type: string
      responses:
        "200":
          description: Сессия успешно удалена
        "409":
          description: Невозможно удалить текущую сессию
      tags: *a3
  /auth/totp/enable:
    put:
      operationId: TotpController_enable
      summary: Включение двухфакторной аутентификации
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnableTotpDto"
      responses:
        "200":
          description: Двухфакторная аутентификация включена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnableTotpEntity"
        "400":
          description: Неверный код подтверждения
      tags:
        &a4
        - TOTP
  /auth/totp/generate:
    post:
      operationId: TotpController_generateSecret
      summary: Генерация секретного ключа для двухфакторной аутентификации
      parameters: []
      responses:
        "200":
          description: Секрет для TOTP сгенерирован
          content:
            application/json:
              schema:
                type: object
      tags: *a4
  /auth/totp/disable:
    delete:
      operationId: TotpController_disable
      summary: Отключение двухфакторной аутентификации
      parameters: []
      responses:
        "200":
          description: Двухфакторная аутентификация отключена
      tags: *a4
  "/course/by-slug/{slug}":
    get:
      operationId: CourseController_findBySlug
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        &a5
        - Course
  "/course/by-id/{id}":
    get:
      operationId: CourseController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
  /course/create:
    post:
      operationId: CourseController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCourseDto"
      responses:
        "200":
          description: ""
      tags: *a5
  "/course/change/thumbnail/{id}":
    patch:
      operationId: CourseController_changeThumbnail
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
info:
  title: TeaCoder API
  description: API for Teacoder educational platform
  version: 1.0.0
  contact:
    name: TeaCoder Team
    url: https://teacoder.ru
    email: help@teacoder.ru
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    UserEntity:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор пользователя
          example: f82a0b7d-3517-4f3b-b865-9e774d6bde76
        email:
          type: string
          description: Адрес электронной почты пользователя
          example: user@example.com
        password:
          type: string
          description: Пароль пользователя
          example: password123
        username:
          type: string
          description: Имя пользователя
          example: user123
        displayName:
          type: string
          description: Отображаемое имя пользователя
          example: Иван Иванов
        picture:
          type: string
          description: Ссылка на изображение профиля пользователя
          example: https://example.com/avatar.jpg
        points:
          type: number
          description: Количество очков пользователя
          example: 150
        role:
          type: number
          description: Роль пользователя
          example: STUDENT
          enum:
            - STUDENT: STUDENT
              ADMIN: ADMIN
        isVerified:
          type: boolean
          description: Статус подтверждения пользователя
          example: false
        isTotpEnabled:
          type: boolean
          description: Статус включения двухфакторной аутентификации
          example: false
        totpSecret:
          type: string
          description: Секретный ключ для двухфакторной аутентификации
          example: totp_secret
        createdAt:
          format: date-time
          type: string
          description: Дата и время создания учетной записи пользователя
          example: 2024-11-09T10:00:00Z
        updatedAt:
          format: date-time
          type: string
          description: Дата и время последнего обновления учетной записи
          example: 2024-11-09T12:00:00Z
      required:
        - id
        - email
        - password
        - username
        - displayName
        - points
        - role
        - isVerified
        - isTotpEnabled
        - totpSecret
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
          example: John Doe
          description: Имя пользователя
        email:
          type: string
          example: john.doe@example.com
          description: Электронная почта пользователя
        password:
          type: string
          example: "123456"
          description: Пароль пользователя (от 6 до 128 символов)
          minLength: 6
          maxLength: 128
      required:
        - name
        - email
        - password
    ChangePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: "123456"
          description: Старый пароль пользователя
        newPassword:
          type: string
          example: "123456"
          description: Новый пароль пользователя (от 6 до 128 символов)
          minLength: 6
          maxLength: 128
      required:
        - oldPassword
        - newPassword
    LoginDto:
      type: object
      properties:
        email:
          type: string
          example: john.doe@example.com
          description: Электронная почта пользователя
        password:
          type: string
          example: "123456"
          description: Пароль пользователя (от 6 до 128 символов)
          minLength: 6
          maxLength: 128
        pin:
          type: string
          example: "123456"
          description: PIN-код для TOTP аутентификации (6 цифр)
          minLength: 6
          maxLength: 6
      required:
        - email
        - password
    LocationInfo:
      type: object
      properties:
        country:
          type: string
          description: Страна пользователя
          example: Россия
        city:
          type: string
          description: Город пользователя
          example: Москва
        latitude:
          type: number
          description: Широта местоположения
          example: 55.7558
        longitude:
          type: number
          description: Долгота местоположения
          example: 37.6173
      required:
        - country
        - city
        - latitude
        - longitude
    DeviceInfo:
      type: object
      properties:
        browser:
          type: string
          description: Тип браузера пользователя
          example: Chrome
        os:
          type: string
          description: Операционная система устройства
          example: Windows
        type:
          type: string
          description: Тип устройства пользователя
          example: Desktop
      required:
        - browser
        - os
        - type
    SessionMetadata:
      type: object
      properties:
        location:
          description: Информация о местоположении пользователя
          allOf:
            - $ref: "#/components/schemas/LocationInfo"
        device:
          description: Информация об устройстве пользователя
          allOf:
            - $ref: "#/components/schemas/DeviceInfo"
        ip:
          type: string
          description: IP-адрес пользователя
          example: 192.168.1.1
      required:
        - location
        - device
        - ip
    SessionEntity:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор сессии
          example: session-id-12345
        createdAt:
          format: date-time
          type: string
          description: Дата и время создания сессии
          example: 2024-11-09T10:00:00Z
        metadata:
          description: Данные метаданных сессии (местоположение, устройство, IP)
          allOf:
            - $ref: "#/components/schemas/SessionMetadata"
      required:
        - id
        - createdAt
        - metadata
    EnableTotpDto:
      type: object
      properties:
        secret:
          type: string
          example: JBSWY3DPEHPK3PXP
          description: Секретный ключ для TOTP аутентификации
        pin:
          type: string
          example: "123456"
          description: PIN-код для TOTP аутентификации (6 цифр)
          minLength: 6
          maxLength: 6
      required:
        - secret
        - pin
    EnableTotpEntity:
      type: object
      properties:
        isTotpEnabled:
          type: boolean
          description: Статус двухфакторной аутентификации для пользователя
          example: true
        totpSecret:
          type: string
          description: Секрет, используемый для TOTP
          example: JBSWY3DPEHPK3PXP
      required:
        - isTotpEnabled
        - totpSecret
    CreateCourseDto:
      type: object
      properties: {}
