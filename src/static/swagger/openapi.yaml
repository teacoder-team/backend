openapi: 3.0.0
paths:
  /auth/account:
    get:
      description: Fetch account information from the current session.
      operationId: AccountController_fetch
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch account
      tags:
        &a1
        - Account
  /auth/account/create:
    post:
      description: Create a new account
      operationId: AccountController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "200":
          description: ""
      summary: Create Account
      tags: *a1
  /auth/account/reset_password:
    post:
      description: Send an email to reset account password.
      operationId: AccountController_sendPasswordReset
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendPasswordResetDto"
      responses:
        "200":
          description: ""
      summary: Send Password Reset
      tags: *a1
    patch:
      description: Confirm password reset and change the password.
      operationId: AccountController_passwordReset
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetDto"
      responses:
        "200":
          description: ""
      summary: Password Reset
      tags: *a1
  /auth/account/change/password:
    patch:
      description: Change the current account password.
      operationId: AccountController_changePassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordDto"
      responses:
        "200":
          description: ""
      summary: Change Password
      tags: *a1
  /auth/session/login:
    post:
      operationId: SessionController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: ""
      summary: Войти в систему
      tags:
        &a2
        - Session
  /auth/session/logout:
    post:
      operationId: SessionController_logout
      parameters: []
      responses:
        "200":
          description: ""
      summary: Выйти из системы
      tags: *a2
  /auth/session/all:
    get:
      operationId: SessionController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      summary: Получить все активные сессии для пользователя
      tags: *a2
  /auth/session/current:
    get:
      operationId: SessionController_findCurrent
      parameters: []
      responses:
        "200":
          description: ""
      summary: Получить данные текущей активной сессии
      tags: *a2
  "/auth/session/remove/{id}":
    delete:
      operationId: SessionController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      summary: Удалить конкретную сессию по ID
      tags: *a2
  /users:
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch All
      tags:
        &a3
        - Users
  /users/@me:
    get:
      description: Retrieve your user information.
      operationId: UsersController_self
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch Self
      tags: *a3
  /users/@me/avatar:
    patch:
      operationId: UsersController_changeAvatar
      parameters: []
      responses:
        "200":
          description: ""
      summary: Изменить аватар пользователя
      tags: *a3
  /courses/all:
    get:
      operationId: CourseController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        &a4
        - Course
  "/courses/by-slug/{slug}":
    get:
      operationId: CourseController_findBySlug
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  "/courses/by-id/{id}":
    get:
      operationId: CourseController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  /courses/create:
    post:
      operationId: CourseController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCourseDto"
      responses:
        "200":
          description: ""
      tags: *a4
  "/courses/change/thumbnail/{id}":
    patch:
      operationId: CourseController_changeThumbnail
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
info:
  title: TeaCoder API
  description: API for Teacoder educational platform
  version: 1.0.0
  contact:
    name: TeaCoder Team
    url: https://teacoder.ru
    email: help@teacoder.ru
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties: {}
    SendPasswordResetDto:
      type: object
      properties: {}
    PasswordResetDto:
      type: object
      properties: {}
    ChangePasswordDto:
      type: object
      properties: {}
    LoginDto:
      type: object
      properties: {}
    CreateCourseDto:
      type: object
      properties: {}
