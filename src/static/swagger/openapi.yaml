openapi: 3.0.0
paths:
  /auth/account:
    get:
      description: Fetch account information from the current session.
      operationId: AccountController_fetch
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch account
      tags: &a1
        - Account
  /auth/account/create:
    post:
      description: Create a new account
      operationId: AccountController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "200":
          description: ""
      summary: Create Account
      tags: *a1
  /auth/account/reset_password:
    post:
      description: Send an email to reset account password.
      operationId: AccountController_sendPasswordReset
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendPasswordResetDto"
      responses:
        "200":
          description: ""
      summary: Send Password Reset
      tags: *a1
    patch:
      description: Confirm password reset and change the password.
      operationId: AccountController_passwordReset
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetDto"
      responses:
        "200":
          description: ""
      summary: Password Reset
      tags: *a1
  /auth/account/change/password:
    patch:
      description: Change the current account password.
      operationId: AccountController_changePassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordDto"
      responses:
        "200":
          description: ""
      summary: Change Password
      tags: *a1
  /auth/session/login:
    post:
      description: Login to an account.
      operationId: SessionController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: ""
      summary: Login
      tags: &a2
        - Session
  /auth/session/logout:
    post:
      description: Delete current session.
      operationId: SessionController_logout
      parameters: []
      responses:
        "200":
          description: ""
      summary: Logout
      tags: *a2
  /auth/session/all:
    get:
      description: Fetch all sessions associated with this account.
      operationId: SessionController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch Sessions
      tags: *a2
  /auth/session/current:
    get:
      description: Fetch the details of the currently active session.
      operationId: SessionController_findCurrent
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch Current Session
      tags: *a2
  /auth/session/{id}:
    delete:
      description: Delete a specific active session.
      operationId: SessionController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      summary: Revoke Session​
      tags: *a2
  /auth/mfa/ticket:
    put:
      description: Create a new MFA ticket or validate an existing one.
      operationId: MfaController_createTicket
      parameters: []
      responses:
        "200":
          description: ""
      summary: Create MFA ticket​
      tags: &a3
        - MFA
  /auth/mfa:
    get:
      description: Fetch MFA status of an account.
      operationId: MfaController_fetchStatus
      parameters: []
      responses:
        "200":
          description: ""
      summary: MFA Status​​
      tags: *a3
  /auth/mfa/recovery:
    post:
      description: Fetch recovery codes for an account.
      operationId: MfaController_fetchRecovery
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch Recovery Codes​​​
      tags: *a3
    patch:
      description: Re-generate recovery codes for an account.
      operationId: MfaController_generateRecovery
      parameters: []
      responses:
        "200":
          description: ""
      summary: Generate Recovery Codes​​
      tags: *a3
  /auth/mfa/totp:
    put:
      description: Enable TOTP 2FA for an account.
      operationId: MfaController_totpEnable
      parameters: []
      responses:
        "200":
          description: ""
      summary: Enable TOTP 2FA​​
      tags: *a3
    post:
      description: Generate a new secret for TOTP.
      operationId: MfaController_totpGenerateSecret
      parameters: []
      responses:
        "200":
          description: ""
      summary: Generate TOTP Secret​​​
      tags: *a3
    delete:
      description: Disable TOTP 2FA for an account.
      operationId: MfaController_totpDisable
      parameters: []
      responses:
        "200":
          description: ""
      summary: Disable TOTP 2FA​​
      tags: *a3
  /users:
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch All
      tags: &a4
        - Users
  /users/@me:
    get:
      description: Retrieve your user information.
      operationId: UsersController_self
      parameters: []
      responses:
        "200":
          description: ""
      summary: Fetch Self
      tags: *a4
  /users/@me/avatar:
    patch:
      operationId: UsersController_changeAvatar
      parameters: []
      responses:
        "200":
          description: ""
      summary: Изменить аватар пользователя
      tags: *a4
  /courses/all:
    get:
      operationId: CourseController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      tags: &a5
        - Course
  /courses/by-slug/{slug}:
    get:
      operationId: CourseController_findBySlug
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
  /courses/by-id/{id}:
    get:
      operationId: CourseController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
  /courses/create:
    post:
      operationId: CourseController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCourseDto"
      responses:
        "200":
          description: ""
      tags: *a5
  /courses/change/thumbnail/{id}:
    patch:
      operationId: CourseController_changeThumbnail
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
info:
  title: TeaCoder API
  description: API for Teacoder educational platform
  version: 1.0.0
  contact:
    name: TeaCoder Support
    url: https://teacoder.ru
    email: support@teacoder.ru
  termsOfService: https://teacoder.ru/docs/agreement
  license:
    name: AGPLv3
    url: https://github.com/teacoder-team/backend/blob/master/LICENSE
tags: []
servers:
  - url: https://api.teacoder.ru
    description: TeaCoder Production
  - url: http://local.teacoder.ru:14702
    description: Local TeaCoder Environment
components:
  schemas:
    CreateUserDto:
      type: object
      properties: {}
    SendPasswordResetDto:
      type: object
      properties: {}
    PasswordResetDto:
      type: object
      properties: {}
    ChangePasswordDto:
      type: object
      properties: {}
    LoginDto:
      type: object
      properties: {}
    CreateCourseDto:
      type: object
      properties: {}
