generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email    String  @unique
  password String?

  username    String @unique
  displayName String @map("display_name")

  picture String?
  points  Int     @default(0)

  method AuthMethod
  role   UserRole   @default(STUDENT)

  isVerified    Boolean @default(false) @map("is_verified")
  isTotpEnabled Boolean @default(false) @map("is_totp_enabled")
  totpSecret    String? @default("totp_secret")

  tokens Token[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Course {
  id String @id @default(uuid())

  title String
  slug  String @unique

  description String?
  thumbnail   String?

  youtubeUrl String? @map("youtube_url")
  codeUrl    String? @map("code_url")

  isPublished Boolean @default(false) @map("is_published")
  views       Int     @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

model Token {
  id String @id @default(uuid())

  token String    @unique
  type  TokenType

  expiresIn DateTime @map("expires_in")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  @@map("tokens")
}

enum UserRole {
  STUDENT
  ADMIN

  @@map("user_roles")
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  GITHUB

  @@map("auth_methods")
}

enum TokenType {
  PASSWORD_RESET

  @@map("token_types")
}
