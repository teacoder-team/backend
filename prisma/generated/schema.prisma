generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email    String  @unique
  password String?

  username    String @unique
  displayName String @map("display_name")

  avatar String?
  points Int     @default(0)

  role UserRole @default(STUDENT)

  passwordReset PasswordReset?
  mfa           MultiFactorAuthentication?

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  UserProgress UserProgress[]

  @@map("users")
}

model PasswordReset {
  id String @id @default(uuid())

  token  String   @unique
  expiry DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reset_passwords")
}

model MultiFactorAuthentication {
  id String @id @default(uuid())

  recoveryCodes String[] @default([]) @map("recovery_codes")

  totp   Totp?   @relation(fields: [totpId], references: [id], onDelete: Cascade)
  totpId String? @unique @map("totp_id")

  passkey   Passkey? @relation(fields: [passkeyId], references: [id])
  passkeyId String?  @unique @map("passkey_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("multi_factor_authentication")
}

model Passkey {
  id String @id @default(uuid())

  publicKey   String  @map("public_key")
  privateKey  String  @map("private_key")
  isActivated Boolean @default(false) @map("is_activated")

  mfa MultiFactorAuthentication?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("passkeys")
}

model Totp {
  id String @id @default(uuid())

  status TotpStatus @default(DISABLED)
  secret String?

  mfa MultiFactorAuthentication?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("totps")
}

model Course {
  id String @id @default(uuid())

  title String
  slug  String @unique

  description String?
  thumbnail   String?

  youtubeUrl String? @map("youtube_url")
  codeUrl    String? @map("code_url")

  isPublished Boolean @default(false) @map("is_published")

  views Int @default(0)

  sections Section[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

model Section {
  id String @id @default(uuid())

  title   String
  lessons Lesson[]

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String? @map("course_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sections")
}

model Lesson {
  id String @id @default(uuid())

  title String
  slug  String @unique

  description String?
  kinescopeId String  @map("kinescope_id")

  isPublished Boolean @default(false) @map("is_published")

  userProgress UserProgress[]

  section   Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String?  @map("section_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("lessons")
}

model UserProgress {
  id String @id @default(uuid())

  isCompleted Boolean @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String @map("lesson_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, lessonId])
  @@index([lessonId])
  @@map("user_progress")
}

enum UserRole {
  STUDENT
  ADMIN

  @@map("user_roles")
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED

  @@map("email_verification_statuses")
}

enum TotpStatus {
  DISABLED
  PENDING
  ENABLED

  @@map("totp_statuses")
}
